cd src/project/hbp_jk/



___________"""Comands for manually populating the data tables"""_________________
Use these in psql:

INSERT into companies (name, company_type)
VALUES('Pacific Gas and Electric', 'energy utility');

INSERT into companies (name, company_type)
VALUES('Southern California Edison Company', 'energy utility');

INSERT into companies (name, company_type)
VALUES('San Diego Gas and Electric', 'energy utility');

INSERT into companies (name, company_type)
VALUES('SPG Solar', 'solar contractor');

INSERT into companies (name, company_type)
VALUES('Kyocera Solar', 'photovoltaics manufacturer');

INSERT into companies (name, company_type)
VALUES('Xantrex', 'inverter manufacturer');

INSERT into programs (application_id, utility, city, county, zipcode, contractor, pv_manuf, invert_manuf)
VALUES('SD-CSI-00001', 3, 'San Diego', 'San Diego', '92121', 4, 5, 6);

INSERT into productions (application_id, energy_type, end_date, produced)
VALUES('SD-CSI-00001', 'solar', '5/1/2007', '5/31/2007', 36578);

INSERT into consumptions (utility, year, consumed)
VALUES(3, 2007, 20686000000);

INSERT into consumptions (utility, year, consumed)
VALUES(3, 2008, 20324000000);

INSERT into consumptions (utility, year, consumed)
VALUES(1, 2007, 86078000000);

______________________"""table data and queries""" ______________________________
use these in psql:

COMPANIES TABLE DATA

solar_viz=# SELECT * from companies
solar_viz-# ;
 company_id |                name                |        company_type
------------+------------------------------------+----------------------------
          1 | Pacific Gas and Electric           | energy utility
          2 | Southern California Edison Company | energy utility
          3 | San Diego Gas and Electric Company | energy utility
          4 | SPG Solar                          | solar contractor
          5 | Kyocera Solar                      | photovoltaics manufacturer
          6 | Xantrex Technology                 | inverter manufacturer
(6 rows)


PRODUCTIONS TABLE DATA

solar_viz=# SELECT * from productions
solar_viz-# ;
 production_id | application_id | energy_type |     start_date      |      end_date       | produced
---------------+----------------+-------------+---------------------+---------------------+----------
             1 | SD-CSI-00001   | solar       | 2007-05-01 00:00:00 | 2007-05-31 00:00:00 |    36578
(1 row)


PROGRAMS TABLE DATA

solar_viz=# SELECT * from programs
;
 application_id | admin |   city    |  county   | zipcode | contractor | pv_manuf | invert_manuf | status
----------------+-------+-----------+-----------+---------+------------+----------+--------------+--------
 SD-CSI-00001   |     3 | San Diego | San Diego | 92121   |          4 |        5 |            6 |
(1 row)

________________"""creating, dumping, and storing databases"""__________________
use these in terminal

(env) $ createdb solar_viz            # creates the database
>>> db.create_all()             # create the database tables from classes in model.py -i
env) $ dropdb solar_vis                # deletes the database
env) $ pg.dump solar_viz > solar.sql   # stores the database in a sql file called 'solar'
env) $ psql solar_viz                  # view the database in psql



##################################################################
sqlalchemy commands

in query.py
>>> from sqlalchemy import extract

This query works:
production = Production.query.filter(extract('year', Production.end_date) == 2007).all()

[<Production application_id=SD-CSI-00001
                   energy_type=solar
                   end_date=2007-05-31 00:00:00
                   produced=36578>, <Production application_id=SD-CSI-00001
                   energy_type=solar
                   end_date=2007-06-30 00:00:00
                   produced=41303>, <Production application_id=SD-CSI-00001
                   energy_type=solar
                   end_date=2007-07-31 00:00:00
                   produced=38116>, <Production application_id=SD-CSI-00001
                   energy_type=solar
                   end_date=2007-08-31 00:00:00
                   produced=35243>]


This query works:
production_year = db.session.query(extract('year', Production.end_date)).all()

>>> production_year
[(2007.0,), (2007.0,), (2007.0,), (2007.0,), (2014.0,), (2015.0,), (2015.0,), (2015.0,), (2011.0,), (2011.0,), (2011.0,), (2018.0,), (2018.0,), (2018.0,), (2018.0,), (2019.0,), (2019.0,), (2015.0,), (2016.0,), (2016.0,), (2016.0,), (2016.0,), (2016.0,), (2016.0,), (2016.0,), (2016.0,)]

This query works:
production_year = db.session.query(extract('year', Production.end_date)).group_by(extract('year', Production.end_date)).all()

>>> production_year
[(2011.0,), (2015.0,), (2007.0,), (2019.0,), (2016.0,), (2014.0,), (2018.0,)]

This query works:
total_produced = db.session.query(func.sum(Production.produced).label('total')).all()

>>> total_produced
[(Decimal('365065'),)]

>>> int(total_produced[0])

This is the final query and it works!

production_year = db.session.query(extract('year', Production.end_date), func.sum(Production.produced).label('total')).group_by(extract('year', Production.end_date)).all()

>>> production_year
[(2011.0, Decimal('22302')), (2015.0, Decimal('6490')), (2007.0, Decimal('151240')), (2019.0, Decimal('18356')), (2016.0, Decimal('103458')), (2014.0, Decimal('301')), (2018.0, Decimal('62918'))]



